// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package nakama

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, user_id, content)
VALUES ($1, $2, $3)
RETURNING created_at
`

type CreatePostParams struct {
	PostID  string
	UserID  string
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.PostID, arg.UserID, arg.Content)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, username)
VALUES ($1, LOWER($2), $3)
RETURNING created_at
`

type CreateUserParams struct {
	UserID   string
	Email    string
	Username string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserID, arg.Email, arg.Username)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const post = `-- name: Post :one
SELECT posts.id, posts.user_id, posts.content, posts.created_at, posts.updated_at, users.username
FROM posts
INNER JOIN users ON posts.user_id = users.id
WHERE posts.id = $1
`

type PostRow struct {
	ID        string
	UserID    string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
}

func (q *Queries) Post(ctx context.Context, postID string) (PostRow, error) {
	row := q.db.QueryRowContext(ctx, post, postID)
	var i PostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const posts = `-- name: Posts :many
SELECT posts.id, posts.user_id, posts.content, posts.created_at, posts.updated_at, users.username
FROM posts
INNER JOIN users ON posts.user_id = users.id
ORDER BY posts.id DESC
`

type PostsRow struct {
	ID        string
	UserID    string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
}

func (q *Queries) Posts(ctx context.Context) ([]PostsRow, error) {
	rows, err := q.db.QueryContext(ctx, posts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostsRow
	for rows.Next() {
		var i PostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userByEmail = `-- name: UserByEmail :one
SELECT id, email, username, created_at, updated_at FROM users WHERE email = LOWER($1)
`

func (q *Queries) UserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, userByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userExistsByEmail = `-- name: UserExistsByEmail :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE email = LOWER($1)
)
`

func (q *Queries) UserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userExistsByUsername = `-- name: UserExistsByUsername :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE LOWER(username) = LOWER($1)
)
`

func (q *Queries) UserExistsByUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExistsByUsername, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
