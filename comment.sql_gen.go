// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: comment.sql

package nakama

import (
	"context"
	"time"
)

const comments = `-- name: Comments :many
SELECT comments.id, comments.user_id, comments.post_id, comments.content, comments.created_at, comments.updated_at, users.username
FROM comments
INNER JOIN users ON comments.user_id = users.id
WHERE comments.post_id = $1
ORDER BY comments.id DESC
`

type CommentsRow struct {
	ID        string
	UserID    string
	PostID    string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
}

func (q *Queries) Comments(ctx context.Context, postID string) ([]CommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, comments, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommentsRow
	for rows.Next() {
		var i CommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, user_id, post_id, content)
VALUES ($1, $2, $3, $4)
RETURNING created_at
`

type CreateCommentParams struct {
	CommentID string
	UserID    string
	PostID    string
	Content   string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.CommentID,
		arg.UserID,
		arg.PostID,
		arg.Content,
	)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}
